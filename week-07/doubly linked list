#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createList(int size) {
    struct Node* head = NULL;
    struct Node* temp = NULL;
    struct Node* newNode = NULL;
    int value;

    printf("Enter %d values for the list:\n", size);
    for (int i = 0; i < size; i++) {
        newNode = (struct Node*)malloc(sizeof(struct Node));
        printf("Enter value %d: ", i + 1);
        scanf("%d", &value);

        newNode->data = value;
        newNode->next = NULL;
        newNode->prev = NULL;

        if (head == NULL) {
            head = newNode;
            temp = head;
        } else {
            temp->next = newNode;
            newNode->prev = temp;
            temp = newNode;
        }
    }
    return head;
}

void insertLeft(struct Node* head, int target, int newValue) {
    struct Node* temp = head;
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newValue;

    while (temp != NULL && temp->data != target) {
        temp = temp->next;
    }

    if (temp != NULL) {

        if (temp->prev == NULL) {
            newNode->next = temp;
            temp->prev = newNode;
            head = newNode;
        }

        else {
            newNode->prev = temp->prev;
            newNode->next = temp;
            temp->prev->next = newNode;
            temp->prev = newNode;
        }
    } else {
        printf("Node with value %d not found!\n", target);
    }
}


void deleteNode(struct Node** head, int value) {
    struct Node* temp = *head;

    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found!\n", value);
        return;
    }


    if (temp->prev == NULL) {
        *head = temp->next;
        if (temp->next != NULL) {
            temp->next->prev = NULL;
        }
    }

    else {
        if (temp->next != NULL) {
            temp->next->prev = temp->prev;
        }
        temp->prev->next = temp->next;
    }

    free(temp);
}

void displayList(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("The list is empty.\n");
        return;
    }

    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    int choice, value, target, size;

    printf("Enter the size of the doubly linked list: ");
    scanf("%d", &size);


    head = createList(size);

    do {

        printf("\n--- Doubly Linked List Operations ---\n");
        printf("1. Display List\n");
        printf("2. Insert Node to the Left of a Specific Node\n");
        printf("3. Delete Node by Value\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Current List: ");
                displayList(head);
                break;

            case 2:
                printf("Enter the value of the node before which you want to insert: ");
                scanf("%d", &target);
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                insertLeft(head, target, value);
                break;

            case 3:
                printf("Enter the value of the node to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;

            case 4:
                printf("Exiting program...\n");
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}
